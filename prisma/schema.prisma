// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  wishlist      Wishlist? // Each user has one wishlist
  Session       Session[]
  Account       Account?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id               String          @id @default(cuid())
  name             String
  background_image String?
  metacritic       Int?
  rating_top       Int?
  slug             String
  Wishlists        WishlistGames[] // Many-to-many relation with WishlistGames
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Wishlist {
  id        String          @id @default(cuid())
  userId    String          @unique
  user      User            @relation(fields: [userId], references: [id])
  games     WishlistGames[] // Many-to-many relation with games
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model WishlistGames {
  wishlistId String
  gameId     String

  wishlist Wishlist @relation(fields: [wishlistId], references: [id])
  game     Game     @relation(fields: [gameId], references: [id])

  @@id([wishlistId, gameId])
}
